<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://416426.github.io</id>
    <title>💤狐白</title>
    <updated>2021-09-14T07:07:27.335Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://416426.github.io"/>
    <link rel="self" href="https://416426.github.io/atom.xml"/>
    <logo>https://416426.github.io/images/avatar.png</logo>
    <icon>https://416426.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 💤狐白</rights>
    <entry>
        <title type="html"><![CDATA[驱虫市场电商分析案例👻]]></title>
        <id>https://416426.github.io/qu-chong-shi-chang-dian-shang-fen-xi-an-li/</id>
        <link href="https://416426.github.io/qu-chong-shi-chang-dian-shang-fen-xi-an-li/">
        </link>
        <updated>2021-09-14T06:19:47.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h2 id="1基本分析逻辑">1.基本分析逻辑</h2>
<p>逐步缩进， 先看总的，再看每一类目</p>
<h3 id="11分析流程">1.1分析流程</h3>
<figure data-type="image" tabindex="1"><img src="https://416426.github.io/post-images/1631603085635.png" alt="" loading="lazy"></figure>
<h3 id="12产品结构-波士顿矩阵">1.2产品结构 - 波士顿矩阵</h3>
<figure data-type="image" tabindex="2"><img src="https://416426.github.io/post-images/1631602905396.png" alt="" loading="lazy"></figure>
<h3 id="13市场类别">1.3市场类别</h3>
<p>评判市场和品牌的发展趋势和增长情况,从宏观到微观,从大市场到细分市场:</p>
<ol>
<li>互联网产品由关注用户增量到用户存量,判断产品或市场是用户增量还是存量,只需要判断有新的需求出现即可:<strong>增量市场</strong>:从无到有,以前关注哪些需求没有被满足,快速迭代抢占市场,考虑最多的不是用户体验.<br>
<strong>流量</strong>=新增客户.例如:智能手机潮开始时的市场.小米面对的是增量.<br>
<strong>存量市场</strong>:从有到优,现在关注如何更好的满足需求,考虑更多的是用户体验.<br>
<strong>产品价值</strong>=新体验-旧体验-替换成本,新体验没有突破性大幅增加,产品价值很难实现.<br>
<strong>流量</strong>=用户时间(停留时间越久,利益价值越大).<br>
例如:现在人手一台智能手机,小米面对存量市场,如何让需要换手机的用户换成小米,从有到优.</li>
<li><strong>创新</strong>:想要用产品价值撬动一个用户,同纬度竞争别家的先发优势门槛太高,如果别家体量很大,基本可以放弃;<br>
创新可能就是剩下的活路,而面对互联网的高速发展,线下需求基本都被互联网化,切入点可能就转移到细分市<br>
场.<br>
例如:微信QQ是社交领域的霸主,陌陌探探在陌生人社交上也分了一杯羹,这些已存在的需求,没有被充分实现,也<br>
算增量市场</li>
</ol>
<h3 id="14产品生命周期">1.4产品生命周期</h3>
<figure data-type="image" tabindex="3"><img src="https://416426.github.io/post-images/1631602912762.png" alt="" loading="lazy"></figure>
<h3 id="15处理项目需求的基本思路">1.5处理项目需求的基本思路</h3>
<ol>
<li>了解项目公司的背景和对接人员情况<br>
公司的产品结构,市场环境,对接人的角色和权利等级等</li>
<li>沟通明确实际的项目需求<br>
团队内部理解项目需求<br>
和业务方沟通需求:从业务的角度理解需求可能的解决方案<br>
优化项目需求<br>
和业务核对项目需求</li>
<li>根据项目需求梳理分析思路:每一步分析的目标,需要的数据支持,反复优化</li>
<li>确定分析工具和人员配置,进行数据分析</li>
<li>撰写分析结论和方案</li>
</ol>
<h3 id="16-项目需求例子">1.6 项目需求例子</h3>
<p>问题:<strong>销售额下降,怎么办?</strong>(这个问题太大,方法也很多:优化老客户,扩大流量,提升转化率)</p>
<ol>
<li><strong>了解</strong>涉及项目相关的所有的业务部门的需求,逻辑,问题点</li>
<li><strong>拆分</strong>:销售额=流量<em>转化率</em>客单价</li>
<li>待<strong>沟通</strong>部门:营销部门(活动),推广部门(流量),客服,售后,供应链<br>
营销:精准营销(找到高价值客户),客户行为分析(响应效果),组合营销(购物篮)推广:竞价排名,买广告位,点击付费(需要很强的经验)<br>
退款和评论分析:优化产品,优化服务质量</li>
<li>沟通之前出想法,沟通之后优化,确认项目需求</li>
<li>数据收集:确认每一步需求的数据(可能用到爬虫)</li>
</ol>
<h2 id="2项目背景及产品架构-数据说明">2.项目背景及产品架构、数据说明</h2>
<ul>
<li>
<p>客户介绍:拜耳官方旗舰店(拜耳公司,总部位于德国的勒沃库森,在六大洲的200个地<br>
点建有750家生产厂;拥有120,000名员工及350家分支机构,几乎遍布世界各国.高分<br>
子,医药保健,化工以及农业是公司的四大支柱产业.公司的产品种类超过10000种)</p>
</li>
<li>
<p>客户需求:拜耳官方旗舰店</p>
</li>
<li>
<p>寻求市场增长点</p>
</li>
<li>
<p>产品架构:<br>
<img src="https://416426.github.io/post-images/1631602884462.png" alt="" loading="lazy"></p>
</li>
<li>
<p>数据说明：<br>
<img src="https://416426.github.io/post-images/1631602920840.png" alt="" loading="lazy"></p>
</li>
</ul>
<h2 id="3驱虫市场潜力分析">3.驱虫市场潜力分析</h2>
<pre><code class="language-python">import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[爬虫]]></title>
        <id>https://416426.github.io/pa-chong/</id>
        <link href="https://416426.github.io/pa-chong/">
        </link>
        <updated>2021-09-11T11:50:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="爬虫的概念">爬虫的概念</h3>
<ul>
<li>模拟客户端发送网络请求  获取响应  按照规则提取数据的程序</li>
</ul>
<h3 id="浏览器请求">浏览器请求</h3>
<ul>
<li>url
<ul>
<li>在chrome -- 点检查 --  点network</li>
<li>url = 请求协议+网站域名+资源的路径+参数</li>
</ul>
</li>
<li>浏览器请求url地址
<ul>
<li>当前url对应的响应+js+css+图片   ------&gt; elements中的内容</li>
</ul>
</li>
<li>爬虫请求url地址
<ul>
<li>当前的url对应的响应</li>
</ul>
</li>
<li>elements的内容和爬虫获取的url地址响应不同，爬虫需要以当前url地址对应的响应为准提取数据</li>
<li>当前URL地址对应的响应在
<ul>
<li>从network中找到当前url地址	点击response</li>
<li>页面右键显示网页源码</li>
</ul>
</li>
</ul>
<h3 id="http-https">HTTP    HTTPS</h3>
<ul>
<li>
<p>HTTP：超文本传输协议</p>
<ul>
<li>明文形式传输</li>
<li>效率更高，但不安全</li>
</ul>
</li>
<li>
<p>HTTPS： HTTP+ SSL（安全套接字层）</p>
<ul>
<li>传输前数据先加密， 之后解密获取内容</li>
<li>效率较低，但是安全</li>
</ul>
</li>
<li>
<p>HTTP协议及请求</p>
<ul>
<li>
<p>General  -  请求参数</p>
<ul>
<li>url地址</li>
<li>请求方式</li>
<li>状态码</li>
</ul>
</li>
<li>
<p>Response Headers -  响应头</p>
</li>
<li>
<p>Request  Headers  -  请求头</p>
<ul>
<li>
<p>点 View  source</p>
<p>请求行 -- get -请求方式</p>
</li>
<li>
<p>get请求和post请求的区别</p>
</li>
<li>
<p>get请求没有请求体， post有，get请求把数据放到url地址中</p>
<ul>
<li>post请求常用与登陆注册</li>
<li>post请求携带的数据量比get请求大，多，常用语传输打文本的时候</li>
</ul>
</li>
<li>
<p>请求头</p>
<ol>
<li>
<p><strong>User-Agent</strong>： 用户代理： 对方服务器可以通过user_agent知道当前请求对方资源的是什么浏览器</p>
<p>​	若果我们需要模拟手机版浏览器发送请求 ，对应的就需要把user_agent改成手机版</p>
</li>
<li>
<p><strong>Cookie</strong>: 用于存储用户信息，每次请求携带上发送给对方浏览器</p>
<ul>
<li>要获取登陆后才能访问的页面</li>
<li>对方服务器回通过cookie判断我们是不是一个爬虫</li>
<li>name ----- value</li>
</ul>
</li>
</ol>
</li>
<li>
<p>请求体</p>
<ul>
<li>携带数据</li>
<li>get请求没有请求体</li>
<li>post有请求体</li>
</ul>
</li>
</ul>
</li>
<li>
<p>HTTP协议--响应</p>
<ul>
<li>
<ol>
<li>
<p>响应头</p>
<p>Set-Cookie： 对方服务通过该字段设置cookie到本地</p>
</li>
</ol>
</li>
<li>
<ol start="2">
<li>
<p>响应体</p>
<p>url地址对应的响应</p>
</li>
</ol>
</li>
</ul>
</li>
<li>
<p>Query String Parameters -  请求参数</p>
</li>
</ul>
</li>
</ul>
<h3 id="requests模块"><strong>requests模块</strong></h3>
<ol>
<li>
<p><strong>安装 --- pip install requests</strong></p>
</li>
<li>
<p><strong>发送get post请求  获取响应</strong></p>
<ol>
<li>response  =  requests.get(url)    # 发送get请求， 请求url对应的响应</li>
<li>response = requests.post(url, data = {请求题的字典})  ## 发送post请求， 请求的url地址对应的响应</li>
</ol>
</li>
<li>
<p><strong>response的方法</strong></p>
<ol>
<li>​	response.text
<ol>
<li>该方式常出现乱码, 原因是编码解码方式不一样，出现乱码使用<strong>response.encoding = &quot;utf-8&quot;</strong></li>
</ol>
</li>
<li>response.content.decode()
<ol>
<li>把响应的二进制字节流转化为str类型</li>
</ol>
</li>
<li>response.request.url  # 发送请求的url地址</li>
<li>response.url  # response响应的url地址</li>
<li>response.requset.headers  #请求头</li>
<li>response.headers # 响应头</li>
</ol>
</li>
<li>
<p><strong>获取网页源码的正确打开方式（一定可以获取到）</strong></p>
<ol>
<li>response.content.decode()</li>
<li>response.content.decode(“gbk”)</li>
<li>response.text</li>
</ol>
<ul>
<li>直接使用response.content.decode()获取，获取不到的话使用response.content.decode(“gbk”)国标码尝试，如果都获取不到response.text一定可以拿到</li>
</ul>
</li>
<li>
<p><strong>发送带header的请求</strong></p>
<pre><code class="language-python">headers = {&quot;User-Agent&quot;:&quot; Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1&quot;
&quot;Referer&quot;:&quot; https://fanyi.baidu.com/?aldtype=16047&quot;}

response = sequests.get(url, headers=headers)
</code></pre>
<ul>
<li>当请求网页发现带一个键值对依然不可以请求成功，可以尝试带更多的键值对，这是根据对方服务器的一个判断进行尝试，可以把除了cookie的全部键值对都带这进行尝试，如果依然不可以，把cookie也带着请求 ---- <strong>大部分情况User-Agent足以</strong></li>
</ul>
</li>
<li>
<p><strong>使用超时参数</strong></p>
<ol>
<li>requests.get(url, headers=headers, timeout=3)
<ol>
<li>timeout=3 --- 3秒内必须返回响应，否则回报错</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>​</p>
]]></content>
    </entry>
</feed>